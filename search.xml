<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>彭山羊的自我介绍🐐</title>
      <link href="/posts/ab65d9e6.html"/>
      <url>/posts/ab65d9e6.html</url>
      
        <content type="html"><![CDATA[<p>🐐参考我的个人说明书：<a href="https://mr3vji60ea.feishu.cn/docx/EklEd65rYohjQUxNWhHcLif0nSg?from=from_copylink">https://mr3vji60ea.feishu.cn/docx/EklEd65rYohjQUxNWhHcLif0nSg?from=from_copylink</a></p><img src="/img/selfintro.png" style="width: 70%;"/>]]></content>
      
      
      <categories>
          
          <category> 自我 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享受失败，享受批评，享受痛苦</title>
      <link href="/posts/e9fcfc7d.html"/>
      <url>/posts/e9fcfc7d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>生活正是对于逆境的积极抗争，生命就体现在这一抗争中</strong>。心智正常的人不能想象完全无拘无束的生活。理性是人在为生存而进行的生物学意义上的斗争中最为重要的装备。</p><p>在数百万人之中，几乎没有一个人在他的生活中实现了他所追求的目标。即便是那些最幸运的人，他们的成就也与其年轻时梦想获得的虚荣仍然相去甚远。数以千计的困难和阻碍撞碎了计划的梦想，而他本身的力量却显得很弱小，以至于无法实现主观想象既定要达到的目标。失望和失败的计划，自身的不足和他提出的既定任务相互矛盾是每个人最大的、最为痛心的经历，这是最典型的人类命运。</p><p>人们可以用各种不同的方式对这种命运做出反应。生活的智者歌德指出了其中一条道路。他在《普罗米修斯》中呼唤道：“你也许说，我应该憎恶生活，逃向沙漠，因为不是所有的美梦都能成真。”浮士德认识到“智慧是最后的结果”。“只有那些每天不得不拥有自由的人，才能像获得生命那样获得自由。”<strong>任何尘世间的不幸都能损害人们的意志和精神。谁想面对真正的生活，而不被生活所奴役，谁就不应当躲避到生活的谎言中去寻找安慰。当企求的成就没有到来，当命运的打击将长期的辛劳所得瞬间化为乌有时，他应当将努力再增加四倍，他应当毫不畏惧地面对不幸</strong>。</p></blockquote><p>共勉</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Journey of Learning VUE3🎄</title>
      <link href="/posts/b23e9197.html"/>
      <url>/posts/b23e9197.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章偏个人记录向，都是之前做一个类博客网站的VUE3课程项目时顺手记下的。可能会有比较跳跃的地方，后续有空重新捋一遍的话，会再次调整。</p><ul><li>项目源码地址：<a href="https://github.com/goatpang/Acwing-Vue-Project">https://github.com/goatpang/Acwing-Vue-Project</a></li><li>课程地址：<a href="https://www.acwing.com/activity/content/introduction/1150/">https://www.acwing.com/activity/content/introduction/1150/</a></li></ul><h1 id="VUE3"><a href="#VUE3" class="headerlink" title="VUE3"></a>VUE3</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><strong>vue3传统创建项目：</strong></p><ul><li>npm install -g @vue&#x2F;cli （安装或升级脚手架）</li><li>vue create + 项目名</li><li>然后 cd 项目名</li><li>npm run serve 即可启动项目</li></ul><blockquote><p>npm run serve – –port 8888可以指定端口号</p></blockquote><p><strong>vite创建项目</strong></p><ul><li>也可以用vite创建vue3</li><li>新一代的前端构建工具（npm用的好像是webpack，是传统构建方法）</li><li>开发环境中，无需打包，可快速冷启动</li><li><code>npm run dev</code>命令是针对vite的构建方式，还需要init，需要install什么的</li></ul><p><strong>图形界面</strong></p><ul><li><p><code>vue ui</code> 可以打开图形化界面</p></li><li><p>图形界面中可以看到几个板块</p><ul><li><strong>创建项目</strong></li><li><strong>插件模块</strong><ul><li>vue router：多个页面的路由功能</li><li>vuex：实现多个组件维护同一个数据</li><li>ant design of vue：阿里的前端框架</li></ul></li><li><strong>依赖模块</strong><ul><li>各种依赖包，和插件应该都会有所对应的</li><li>bootstrap前端框架插件</li></ul></li><li><strong>任务模块</strong><ul><li>serve：调试环境</li><li>build：打包文件</li></ul></li></ul></li></ul><h2 id="vue项目基本架构"><a href="#vue项目基本架构" class="headerlink" title="vue项目基本架构"></a>vue项目基本架构</h2><img src="/posts/b23e9197/image-20230404162054761.png" class="" title="vue项目基本架构"><ul><li><p><strong>文件夹component和views下面都可以存组件，component一般放组成页面的小组件，view下面放调用小组件组成页面的组件，每个组件就是一个vue文件</strong></p></li><li><p><strong>文件夹router下面存的index.js是路由</strong>，设计页面跳转的（如上面代码：path是<code>/about</code>就跳转到<code>AboutView.vue</code>组件中）</p></li><li><p><strong>APP.vue是根组件，即主页面</strong>（调用其它组件，跳转到其它页面（通常由路由实现））</p></li><li><p><strong>程序的入口是在main.js</strong>，会调用主页面App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>从APP.vue调用根组件App</p></li><li><p>并且从router文件夹调用路由</p></li><li><p>并且从store文件夹调用store（Vuex的全局变量和函数）</p></li><li><p>然后把这些东西挂载到<code>#app</code>这个元素上，这个元素在哪？</p><p>（看下面）</p></li></ul></blockquote></li><li><p>public文件夹下有个<strong>index.html，这个html里面就有一个叫<code>app</code>的div元素</strong>，<strong>main.js就是负责把各种组件、各种JS文件挂载到这</strong></p></li></ul><h2 id="vue3基本知识"><a href="#vue3基本知识" class="headerlink" title="vue3基本知识"></a><strong>vue3基本知识</strong></h2><ul><li><p><strong>vue3是一个前端渲染框架</strong></p><ul><li>后端渲染框架：每打开一个链接，就会向服务器发送一个请求</li><li>前端渲染框架：<strong>只有在第一次打开页面的时候，才会向服务器发送请求，将所有页面打包到一个JS文件里面返回，这时候如果我们打开这个网站的其它页面，就不会再向服务器发起请求，而是在本地完成页面的渲染</strong></li></ul></li><li><p>正常的前端三剑客，应该是一个html文件，然后靠html文件把js、css动态引入。而在vue文件中，每个vue文件通常对应着网站的一个页面（称为一个组件），包含了以上的所有东西</p><ul><li>用<code>template</code>标签存放html</li><li>然后就是用<code>script</code>存放js</li><li>用<code>style</code>存放css</li></ul></li><li><p><strong>vue中的CSS样式</strong>可以指定<code>scoped</code>选项，这会<strong>使得每个CSS样式只影响当前组件的样式，不会影响到其它组件的样式</strong></p></li><li><p>VUE是一个组件化的框架，<strong>一个页面有多个部分，可以用多个不同的组件来完成这个页面</strong>，比如导航栏一个组件，内容一个组件，……</p><p>那要如何在一个页面引入组件呢</p><img src="/posts/b23e9197/image-20230404164846231.png" class="" title="image-20230404164846231"></li></ul><h2 id="开发vue项目"><a href="#开发vue项目" class="headerlink" title="开发vue项目"></a>开发vue项目</h2><h3 id="APP-vue分析"><a href="#APP-vue分析" class="headerlink" title="APP.vue分析"></a><strong>APP.vue分析</strong></h3><img src="/posts/b23e9197/image-20230404170005490.png" class="" title="image-20230404170005490"><h3 id="导航栏组件"><a href="#导航栏组件" class="headerlink" title="导航栏组件"></a>导航栏组件</h3><ul><li><strong>首先实现导航栏组件NavBar.vue</strong><ul><li>用一个组件实现，根组件App.vue的<nav>删掉，改成引用该组件即可</li><li>首先在APP.vue的脚本区域import bootstrap组件</li><li>然后<strong>在bootstrap官网去找已经做好样式的导航栏，直接放到vue文件的template里面即可实现导航栏</strong>（这里其实ant design of vue是一样的）</li><li>这里还要把a标签全部改成router-link标签</li></ul></li></ul><h3 id="内容基础组件"><a href="#内容基础组件" class="headerlink" title="内容基础组件"></a>内容基础组件</h3><p><strong>然后是内容组件ContentBase.vue</strong></p><p>为什么要这样呢？因为我们预计的每个页面都是要一个这种框框的内容组件的，既然是每个页面公用的，那跟导航栏的性质一样，将其独立用组件表示更佳，这样调整样式时就可以一起调整</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;!--这里是一个container，</span><br><span class="line">            感觉就是一个固定样式的div罢了</span><br><span class="line">            用于把东西放在中间</span><br><span class="line">      --&gt;</span><br><span class="line">            &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">                &lt;!--这里是card，card就是一个框，里面可以放内容--&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">                    &lt;!--这里是slot，slot就是一个占位符，相当于函数参数一样的东西，</span><br><span class="line">                        可以允许使用这个组件的时候往这个地方加入内容--&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;ContentBase&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    margin-top: 30px;</span><br><span class="line">    margin-bottom: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>上面的代码，三个知识点，首先是：</p><ol><li><code>&lt;div class=&quot;container&quot;&gt;</code> 固定样式的div，用于把内容放在中间</li><li><code>&lt;div class=&quot;card&quot;&gt;</code>固定样式的div，一个带外框的div</li><li><code> &lt;slot&gt;&lt;/slot&gt;</code> 占位符，相当于该组件文件的函数参数，可以在其它组件调用该组件时，往这里填内容</li></ol><h3 id="实现VUE路由"><a href="#实现VUE路由" class="headerlink" title="实现VUE路由"></a><strong>实现VUE路由</strong></h3><ol><li><p>首先只需要在router文件夹下的JS文件添加对应组件的路由路径及名称</p><p>（添加完后，用路径即可实现跳转）</p></li><li><p>为实现导航栏NavBar.vue的路由功能，我们可以采用两种方式</p><p>一种是常规html里面<code>a</code>标签<code>href=&quot;/login&quot;</code>的方式，实现超链接，但这个是后端渲染，每次点击都会向服务器请求一次数据</p><p><strong>还有一种是前端渲染，利用vue提供的<code>router-link</code>标签，以及<code>:to=&quot;&#123;name:&quot;login&quot;&#125;&quot;</code>的方式指定路由位置，实现路由超链接（前端渲染）</strong></p><p>（这里需要把bootstrap复制过来的导航栏代码的a标签全改成router-link，可以点击alt键，实现同时修改）</p><p>（<strong>VUE里面<code>:to=&quot;&quot;</code>中冒号内的内容不是字符串，是一个表达式</strong>）</p></li></ol><h3 id="用户动态界面"><a href="#用户动态界面" class="headerlink" title="用户动态界面"></a>用户动态界面</h3><p><strong>实现用户动态的界面，分成三个模块：</strong></p><p>UserProfileInfo、UserProfilePosts、UserProfileWrite</p><img src="/posts/b23e9197/image-20230404211014905.png" class="" title="image-20230404211014905"><ul><li><strong>布局，用bootstrap的grid system实现</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//这里就完成了3比9的行切分</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">        用户信息</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-9&quot;</span>&gt;</span></span><br><span class="line">        帖子列表</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>图片自适应大小参数</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;.img-fluid&quot;</span> <span class="attr">src</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>图片圆框</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方框卡片card标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>div指定class类型，然后针对该类型使用css调整样式</strong></p></li><li><p><strong>button可以直接用bootstrap的button</strong></p><img src="/posts/b23e9197/image-20230404232528129.png" class="" title="image-20230404232528129"></li></ul><blockquote><p><strong>补充知识，CSS中：</strong></p><p>不加点<code>.</code>是对所有指定标签元素进行样式修改，例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了<code>.</code>的是对指定的Class的标签进行样式修改，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;red&quot;&gt;hello&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="父组件传参子组件"><a href="#父组件传参子组件" class="headerlink" title="父组件传参子组件"></a>父组件传参子组件</h3><p>每个vue组件具有一些参数（这些参数也可以由用户的交互得到）</p><p>这个东西保存在<code>export default</code>里面：</p><p>export default对象的属性：</p><ul><li><code>name</code>：组件的名称</li><li><code>components</code>：存储<code>&lt;template&gt;</code>中用到的所有组件</li><li><code>props</code>：<strong>存储父组件传递给子组件的数据</strong></li><li><code>computed</code>：动态计算某个数据</li><li><code>setup(props, context)</code>：<strong>初始化变量、函数</strong><ul><li><code>ref</code><strong>定义变量</strong>，可以用.value属性重新赋值</li><li><code>reactive</code><strong>定义对象</strong>，不可重新赋值</li><li><code>props</code>存储父组件传递过来的数据</li></ul></li></ul><blockquote><p><code>reactive</code>、<code>computed</code>需要在vue中import</p><p>import {reactive} from ‘vue’;</p></blockquote><p>例如在动态界面的<strong>主组件中的script</strong>就应该这样写：（定义变量对象并返回）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">ContentBase</span>, <span class="title class_">UserProfileInfo</span>, <span class="title class_">UserProfilePosts</span> &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//定义变量为reactive对象</span></span><br><span class="line">        <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            id : <span class="number">1</span>,</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;彭山羊&#x27;</span>,</span><br><span class="line">            <span class="attr">lastname</span>: <span class="string">&#x27;彭&#x27;</span>,</span><br><span class="line">            <span class="attr">firstname</span>: <span class="string">&#x27;山羊&#x27;</span>,</span><br><span class="line">            <span class="attr">fans</span>: <span class="number">1000000</span>,</span><br><span class="line">            <span class="attr">avatar</span>: <span class="string">&#x27;https://cdnv2.ruguoapp.com/FsHDe1QJ2oB7iedLDJfuw4rY1SU-v3.jpg?imageMogr2/auto-orient/heic-exif/1/format/jpeg/thumbnail/!120x120r/gravity/Center/crop/!120x120a0a0&#x27;</span></span><br><span class="line">        <span class="comment">//返回定义的变量</span></span><br><span class="line">        <span class="keyword">return</span> &#123; user &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主组件的template</strong>应该这样写：（把变量对象传给子组件）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContentBase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">UserProfileInfo</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">UserProfileInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">UserProfilePosts</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">UserProfilePosts</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ContentBase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>冒号传参，和前面的router-link的那个<code>:to=&quot;&#123;name:&#39;home&#39;&#125;&quot;</code>性质相同，此时双引号里面的内容是表达式的形式，而非字符串</p><p><strong>子组件的script</strong>应该这样写：（用<code>props</code>获取父组件传来的参数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserProfileInfo&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">user</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子组件的template</strong>应该这样写：（将参数填入页面中）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;.img-fluid&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;user.avatar&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fans&quot;</span>&gt;</span>粉丝数：&#123;&#123; user.fans &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意，这里的src前面有一个冒号，才能解析后面的对象返回值，<code>:src=&quot;user.avatar&quot;</code></p><p>（这种冒号等号双引号的搭配在vue里面太经典了）</p></li><li><p>然后其它是在标签内的文本，就通过<code>&#123;&#123;user.username&#125;&#125;</code>的方式即可解析。</p></li></ul><h3 id="参数计算并使用"><a href="#参数计算并使用" class="headerlink" title="参数计算并使用"></a>参数计算并使用</h3><p>例如<strong>子组件想利用父组件传过来的参数计算，并在子组件中使用</strong></p><p><strong>在script中：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入vue中计算参数所使用的函数computed</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserProfileInfo&#x27;</span>,</span><br><span class="line">    <span class="comment">//这里是接收父组件参数</span></span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">user</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//计算参数也就会得到一个新的参数，这样的参数肯定得在setup中出现</span></span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> fullname = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> props.<span class="property">user</span>.<span class="property">lastname</span> + props.<span class="property">user</span>.<span class="property">firstname</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123; fullname &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>()=&gt;&#123;return props.user.lastname + props.user.firstname;&#125;</code>其实是一种匿名函数的写法</p><p><strong>在template中</strong>： </p><ul><li><strong>直接使用setup中定义的变量</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span>&#123;&#123; fullname &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>条件语句v-if</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;user.isfollowed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>取消关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;!user.isfollowed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="触发事件及绑定"><a href="#触发事件及绑定" class="headerlink" title="触发事件及绑定"></a>触发事件及绑定</h3><p>export default对象的属性：</p><ul><li><code>props</code>：存储父组件传递给子组件的数据</li><li><code>watch()</code>：<strong>当某个数据发生变化时触发</strong></li><li><code>setup(props, context)</code>：<strong>初始化变量、函数</strong><ul><li><code>context.emit()</code>：<strong>触发父组件绑定的函数</strong></li></ul></li></ul><p> <strong>定义函数和定义对象是一样的，都在setup函数里面定义。</strong></p><p>当“关注”这个按钮被点击的时候会触发两种可能的事件：<strong>follow事件和unfollow事件</strong>，在script分别就可以写两个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">……</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    ……</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">follow</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;follow&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">unfollow</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unfollow&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> &#123; ……, follow, unfollow &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在template中就要对对应的标签绑定我们的函数，这里当然是关注button：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unfollow&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.isfollowed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>取消关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;follow&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!user.isfollowed&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>核心点就是在button上加入：</strong><code>@click=&quot;follow</code>“</p><p><code>@click</code>等价于<code>v-on:click</code>，<code>&quot;follow&quot;</code>中的follow就是setup中定义的触发函数（事件）</p><h3 id="子组件传信息给父组件"><a href="#子组件传信息给父组件" class="headerlink" title="子组件传信息给父组件"></a>子组件传信息给父组件</h3><p><strong>子组件触发事件绑定父组件触发事件，实现更改父组件</strong></p><p>在父组件内，需要首先定义一些当子组件的某事件被触发时，父组件要触发的事件</p><p>script中：(<strong>定义父组件的触发事件)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">follow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">isfollowed</span> = <span class="literal">true</span>;</span><br><span class="line">    user.<span class="property">fans</span> = user.<span class="property">fans</span> + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unfollow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">isfollowed</span> = <span class="literal">false</span>;</span><br><span class="line">    user.<span class="property">fans</span> = user.<span class="property">fans</span> - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123; user, follow, unfollow &#125;;</span><br></pre></td></tr></table></figure><p>template中：（<strong>绑定子组件的触发事件和父组件的触发事件</strong>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserProfileInfo</span> @<span class="attr">follow</span>=<span class="string">&quot;follow&quot;</span> @<span class="attr">unfollow</span>=<span class="string">&quot;unfollow&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">UserProfileInfo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子组件中，需要定义触发信号（button），并定义触发事件，<strong>子组件触发事件需要用<code>context.emit()</code>触发所绑定的父组件的触发事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">……</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props,context</span>) &#123;</span><br><span class="line">    ……</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">follow</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">            context.<span class="title function_">emit</span>(<span class="string">&quot;follow&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">unfollow</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">            context.<span class="title function_">emit</span>(<span class="string">&quot;unfollow&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> &#123; ……, follow, unfollow &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="帖子界面"><a href="#帖子界面" class="headerlink" title="帖子界面"></a>帖子界面</h3><ul><li><strong>帖子用对象存储，具体内容用数组存储</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = <span class="title function_">reactive</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">posts</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">content</span>: <span class="string">&#x27;今天上了web课，学了vue，感觉很有意思&#x27;</span>,</span><br><span class="line">                <span class="attr">created_at</span>: <span class="string">&#x27;2023-04-05&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">content</span>: <span class="string">&#x27;今天好好学习，明天好好写代码&#x27;</span>,</span><br><span class="line">                <span class="attr">created_at</span>: <span class="string">&#x27;2023-04-05&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>v-for，循环posts对象展示帖子</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文章总数：&#123;&#123; posts.count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;post in posts.posts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; post.content &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;&#123; post.created_at &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里注意必须要有<code>:key</code>这个参数，要选择一个循环数据中的唯一值作为key<br>（用途是优化循环，对用户透明的）</p></blockquote><h3 id="编辑帖子界面"><a href="#编辑帖子界面" class="headerlink" title="编辑帖子界面"></a>编辑帖子界面</h3><blockquote><p>帖子这种类型其实就是表单form，即可以让用户填数据的组件</p></blockquote><ul><li><strong>textarea组件作为编辑区</strong>（bootstrap上找一个好看的复制过来）</li></ul><img src="/posts/b23e9197/image-20230406160638585.png" class="" title="image-20230406160638585"><ul><li>用<code>v-model</code>将<strong>textarea的内容值</strong>与<strong>自定义变量content绑定</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;edit-post&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>自定义变量<code>ref</code>类型用<code>let</code>，取出ref类型的值需要用value属性</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; content &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>设定button的触发事件post_a_post</strong></li><li><strong>并与父组件绑定，实现发帖</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;post_a_post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>发帖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">post_a_post</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        context.<span class="title function_">emit</span>(<span class="string">&quot;post_a_post&quot;</span>, content.<span class="property">value</span>);</span><br><span class="line">        content.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; content, post_a_post &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>父组件设置绑定子组件</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserProfileWrite</span> @<span class="attr">post_a_post</span>=<span class="string">&quot;post_a_post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">UserProfileWrite</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>父组件定义接收信号的触发事件，接收数据，修改posts对象</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">post_a_post</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">    posts.<span class="property">count</span> = posts.<span class="property">count</span> + <span class="number">1</span>;</span><br><span class="line">    posts.<span class="property">posts</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: posts.<span class="property">count</span>,</span><br><span class="line">        <span class="attr">content</span>: content,</span><br><span class="line">        <span class="attr">created_at</span>: <span class="string">&#x27;2023-04-05&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>posts对象是响应式的reactive对象，在完成修改后，会自动在所有引用该对象的组件中动态更新值，即可实现发帖</p><p><strong>在数组插入元素，尾插入push，头插入unshift</strong></p></blockquote><h3 id="后端API"><a href="#后端API" class="headerlink" title="后端API"></a>后端API</h3><ul><li>acwing给了一些API给我们使用，我的理解就是这是后端开发人员实现的工作（访问数据库之类的），后端将一些功能封装成了接口，给前端人员使用。</li><li>前端开发人员就可以使用后端封装出来的API来实现功能，例如通过API从服务器获取数据，将数据呈现在页面上，或通过API向服务器发送请求以更新数据。</li><li><strong>因此，API是前后端通信的桥梁，它们的实现是后端的内容，但是前端开发人员需要了解如何使用API来实现应用程序的功能。</strong></li><li><strong>这里用需要用到<code>jquery</code>插件引入<code>$</code>，即可使用<code>$.ajax</code>进行API的请求响应</strong></li></ul><h3 id="用户列表页面实现"><a href="#用户列表页面实现" class="headerlink" title="用户列表页面实现"></a>用户列表页面实现</h3><ul><li><p>用ajax请求API，获取用户列表，将用户列表保存到自定义的ref变量users中，并展示到界面上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">ContentBase</span> &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> users = <span class="title function_">ref</span>([]);</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;https://app165.acapp.acwing.com.cn/myspace/userlist/&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                users.<span class="property">value</span> = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123; users &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现CSS的一些动效，用户鼠标悬浮在其它用户的卡片时：</p><ul><li><p>首先把鼠标变一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>周围可以有一些阴影动效，给用户反馈</p></li><li><p>或者是背景变灰，这个比较简单</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>顺手完善路由，路由到没有指定的路径的时候，应该跳到404</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>顺手完善路由，不同的用户的用户界面是不一样的，需要用userid进行区分。且需要登陆以后才会显示用户界面</li></ul><p><strong>更改router下面的index.js</strong>，其中<code>:userID</code>表示参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/userprofile/:userID/&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;userprofile&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">UserProfile</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> <strong>更改NavBar.vue</strong>的路由，加入params，表示传入的参数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;userprofile&#x27;, params: &#123; userID: 2 &#125; &#125;&quot;</span>&gt;</span>用户动态<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>更改用户界面 UserProfile.vue</strong>，获取路由router中的userID参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> userid = route.<span class="property">params</span>.<span class="property">userId</span>;</span><br></pre></td></tr></table></figure><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><ul><li><p>首先在boostrap里面找个登录表单复制过来</p></li><li><p>将登录界面缩小，用分区的做法，只给登录界面三份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;col-3&quot;&gt;</span><br><span class="line">     登录界面</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>将登录界面居中：<code>row</code>后面加上<code>justify-content-md-center</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-md-center&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将登录按钮放大：宽度100%</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123; <span class="attribute">width</span>:<span class="number">100%</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误信息error message</p></li><li><p><strong>表单提交绑定触发事件login</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于表单本身有个默认的触发事件，我们要将原本的默认触发事件阻止的话，写法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>登录组件的表单用<code>v-model</code>绑定setup里面定义的几个变量，用于获取变量</strong></p></li></ul><h3 id="登录机制"><a href="#登录机制" class="headerlink" title="登录机制"></a>登录机制</h3><ul><li><strong>session机制</strong></li></ul><blockquote><p>当用户在Web应用程序中进行登录或进行其他需要身份验证的操作时，<strong>应用程序会创建一个唯一的session ID，并将其存储在用户的浏览器</strong>中，通常是<strong>通过Cookie来实现</strong>。会话ID允许应用程序在后续的请求中识别用户，并<strong>保存用户的状态和相关信息</strong>，例如购物车内容、用户个人信息等。</p></blockquote><blockquote><p>y总说<strong>这是传统机制，很难实现跨域，登录状态难维护</strong>，因为session id都放在cookie里面，而cookie JS是不允许访问的</p></blockquote><ul><li><strong>Token机制</strong></li></ul><blockquote><p>Token机制是一种<strong>无状态</strong>的用户登录机制，它<strong>使用一些加密算法将用户的身份信息和其他相关信息打包成一个Token</strong>，并将Token存储在用户的浏览器中，通常是<strong>通过Cookie或本地存储来实现</strong>。每次请求时，应用程序会检查请求中是否包含有效的Token，如果包含，则可以识别用户，并读取和保存相关状态和信息。</p></blockquote><ul><li><strong>JWT机制</strong>（JSON web Token）</li></ul><blockquote><p>JWT机制是一种<strong>基于Token</strong>的身份验证机制<strong>，它使用JSON格式来存储用户的身份信息和其他相关信息，并使用一些加密算法将其打包成一个Token</strong></p></blockquote><ul><li><strong>其它机制</strong>：OAuth机制、Basic认证机制</li><li><strong>session vs JWT</strong></li></ul><blockquote><p>Session ID是一串随机数，因此会存在数据库中，来比对用户的Session ID是否合法</p><p>而<strong>JWT认证是根据用户的信息和token值判断是否合法</strong>，token并不需要存储在服务器。具体如下：</p><p><strong>token是怎么来的呢？</strong></p><ol><li><strong>构造 header 部分</strong>：header 包含了 <strong>token 的类型</strong>（即 JWT）和<strong>加密算法</strong>（如 HMAC SHA256 或 RSA），需要将其进行 <strong>base64 编码</strong>。</li><li><strong>构造 payload 部分</strong>：payload 包含了用户信息、权限信息、过期时间等相关信息，需要将其进行 <strong>base64 编码</strong>。</li><li><strong>构造 signature 部分</strong>：signature <strong>是由 header 和 payload 部分和密钥组成的签名值，用于验证 token 的真实性和完整性</strong>。生成 signature 需要对 header 和 payload 部分进行签名，并使用<strong>密钥（随机数）对签名值进行加密</strong>，通常使用 HMAC SHA256 或 RSA 签名算法。</li><li><strong>将 header、payload 和 signature 部分组合成一个字符串，使用点号（.）进行连接，形成完整的 token。</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[header] --- B[payload]</span><br><span class="line">    B --- C[signature]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用户再次携带token访问时，将<strong>用户的个人信息拼接</strong>上存储在服务器的<strong>随机数密钥</strong>过一遍<strong>加密算法</strong>，如果得出的值<strong>就是用户携带的token值</strong>，则合法。如果用户的个人信息修改了，那就无法再通过验证，因此也叫签名</p><p><strong>注意：由于JWT的header和payload部分并没有加密，所以可以直接根据access值进行base64解码，去得到一些用户的基本信息</strong></p></blockquote><ul><li><strong>JWT的access和refresh值</strong></li></ul><blockquote><p>JWT认证机制下，用户输入用户名和密码给服务器，服务器会返回两个值：</p><ul><li><strong>一个是access值，就是token值</strong></li><li><strong>另一个是refresh值，用于获取access值</strong></li></ul><p>access值通常只有5分钟有效，refresh值14天内有效，因此可以用refresh值取获取新的access值</p></blockquote><p><strong>JWT的access值header和payload部分是base64编码的，并没有加密，想要解码，将其序列化，获取具体的相关信息</strong>，还得安装一个解码包：<code>jwt-decode</code></p><h3 id="全局变量vuex"><a href="#全局变量vuex" class="headerlink" title="全局变量vuex"></a>全局变量vuex</h3><p>组件是一个树状的形式，如果要把信息依次传递，那就非常麻烦，很多时候所有组件可能都需要用同一些变量，即全局变量，那就得靠vuex来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="comment">//用于存放全局变量，如user对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">      <span class="comment">//用函数返回的形式，“存放”计算得到的变量，如fullname</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">      <span class="comment">//定义修改state中数据的函数，必须是【同步】的</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="comment">//支持定义处理【异步】操作和提交mutation的函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">      <span class="comment">//将app的state拆成多个模块，每个模块都有自己的state、getters、mutations、actions</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>【异步】：即操作需要等待一段时间的，如请求API</p><p>【同步】：能瞬间完成的</p></blockquote><p><strong>modules</strong>本质上还是state，具体实例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ModuleUser</span> <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span><span class="comment">//引入user模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">ModuleUser</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleUser</span> = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ModuleUser</span>;</span><br></pre></td></tr></table></figure><p>这里如果要使用user这个全局变量：<code>store.state.user.username</code></p><h3 id="登录机制实现"><a href="#登录机制实现" class="headerlink" title="登录机制实现"></a>登录机制实现</h3><ul><li>登录组件的login函数利用<code>store.dispatch</code>去调用store的action里的login函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;userStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useStore</span>();</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">        <span class="comment">//调用store的action参数里的函数login，并传入一些data</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="string">&quot;login&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">username</span>:username.<span class="property">value</span>,</span><br><span class="line">            <span class="attr">password</span>:password.<span class="property">value</span>,</span><br><span class="line">            <span class="comment">//顺手再传一个成功的回调函数和一个失败的回调函数</span></span><br><span class="line">            <span class="title function_">success</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="title function_">error</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">&#125;            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用vuex在store的stata中以全局变量的方式存储用户的信息</li><li>在store的action里面写上登录的触发函数login</li></ul><blockquote><p>（1）获取用户的JWT，并将其解码，获取access和refresh</p><p>（2）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> jwt_decode <span class="keyword">from</span> <span class="string">&quot;jwt-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//data是组件传递过来的值，如username和password</span></span><br><span class="line">    <span class="title function_">login</span>(<span class="params">context, data</span>) &#123;</span><br><span class="line">        <span class="comment">//(1)获取JWT token，保存access和refresh值</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;https://app165.acapp.acwing.com.cn/api/token/&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">username</span>: data.<span class="property">username</span>,</span><br><span class="line">                <span class="attr">password</span>: data.<span class="property">password</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">resp</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123;access,refresh&#125;= resp;</span><br><span class="line">                <span class="comment">//(2)根据token，获取用户信息</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>实现登录成功后跳转到用户界面（loginview.vue）</p><p>&#x3D;》利用路由实现<code>router.push(&#123; name: &quot;userlist&quot; &#125;)</code></p></li><li><p>登录成功后：将导航栏中登录button改成用户名button，改成导航到用户列表界面，注册button改成退出button，改成导航到首页，并将JWT删除（删除登录状态）</p></li></ul><blockquote><p>首先要获取存在store中的<code>is_login</code>：<code>$store.state.user.is_login</code></p><p>利用<code>v-if</code>加到button中进行判断<code>is_login</code>的状态，设定不同的导航栏</p><p>注意没有登陆的情况下，不应该有用户动态页面</p></blockquote><h3 id="自动跳转登陆界面"><a href="#自动跳转登陆界面" class="headerlink" title="自动跳转登陆界面"></a>自动跳转登陆界面</h3><ul><li>点击用户卡片，先判断是否登陆，如果未登陆，跳转到登陆界面</li><li>如果已登陆，就跳转到对应的用户界面，这里需要在template传参userid，才能跳转到对应用户的界面，而在vue里面，这里封装的很好，只需要：<code>@click=&quot;open_user_profile(user.id)&quot;</code>这样即可传参，这是因为vue良好的封装，所以才如此简单</li></ul><h3 id="用户动态界面-1"><a href="#用户动态界面-1" class="headerlink" title="用户动态界面"></a>用户动态界面</h3><ul><li><p>修改用户动态界面（第一个视频时候的把用户动态内容写死了，现在需要响应式地请求对应用户的动态）</p><ul><li>首先要请求API，获取用户信息，注意【当前查看用户】和【登陆用户】的区别</li><li>然后css样式，imge-field，使图片居中，flex</li><li>然后是请求API，获取帖子信息</li></ul></li></ul><h3 id="发帖补充"><a href="#发帖补充" class="headerlink" title="发帖补充"></a>发帖补充</h3><ul><li><strong>需要做判断，只有自己的页面可以发帖</strong>（现在查看其它用户的帖子的时候仍有编辑发帖区）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserProfileWrite</span> <span class="attr">v-if</span>=<span class="string">&quot;is_me&quot;</span> @<span class="attr">post_a_post</span>=<span class="string">&quot;post_a_post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">UserProfileWrite</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> is_me = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">return</span> userID == store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span> &#125;)</span><br></pre></td></tr></table></figure><p><strong>添加帖子</strong>：在原来的添加帖子的基础上添加请求API修改数据库的功能即可，原来添加帖子的方式是前端修改，所以其实不需要数据库也可以实现添加帖子，现在API的方式即可永久添加帖子</p><h3 id="Vue判重机制"><a href="#Vue判重机制" class="headerlink" title="Vue判重机制"></a><strong>Vue判重机制</strong></h3><p>在看别人的动态的时候，点【账号名按钮】或【用户动态】并不会跳转回自己的用户页面。这是因为：vue的判重机制默认不包括路由中的参数，判重的过程中，<code>/userprofile/15</code>和<code>/userprofile/36</code>是被认为相同的页面，这就会导致页面不会发生跳转</p><p><strong>解决方案：</strong>指定router-view的key为完整路径（y总推荐都以后这么写）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NavBar /&gt;</span><br><span class="line">  &lt;router-view :key=&quot;$route.fullPath&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="保存登陆状态"><a href="#保存登陆状态" class="headerlink" title="保存登陆状态"></a><strong>保存登陆状态</strong></h3><p>现在的登陆状态是一刷新就没了，如果需要保持登录状态，就需要把access那些存在本地的localstorage <strong>1：51：10分开始讲</strong></p><img src="/posts/b23e9197/image-20230412170411617.png" class="" title="image-20230412170411617"><h3 id="删除帖子"><a href="#删除帖子" class="headerlink" title="删除帖子"></a><strong>删除帖子</strong></h3><p>首先增加删除button，并且调整到向右对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是在profile页面用<code>filter</code>进行前端删除，在profilewrite页面调用API进行后端数据库的删除，如果成功，才调用父组件的前端删除</p><h3 id="编辑帖子：后续自己完成"><a href="#编辑帖子：后续自己完成" class="headerlink" title="编辑帖子：后续自己完成"></a><strong>编辑帖子</strong>：后续自己完成</h3><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a><strong>注册功能</strong></h3><p>复制登录界面，再加一项“确认密码”</p><h3 id="关注功能"><a href="#关注功能" class="headerlink" title="关注功能"></a>关注功能</h3><p>本来只实现了前端关注，现在就是加入后端API调用，使关注可持久化</p><h3 id="build打包部署"><a href="#build打包部署" class="headerlink" title="build打包部署"></a>build打包部署</h3><ul><li><p>用build可以将项目打包为一个dist文件夹：里面会有两个JS文件和两个CSS文件，分别是打包我们自己编写的所有代码和第三方代码（如boostrap）</p></li><li><p>这个文件夹可以部署到服务器上</p></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h4 id="关于ref数据类型"><a href="#关于ref数据类型" class="headerlink" title="关于ref数据类型"></a>关于ref数据类型</h4><p><code>&lt;template&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Current === &#x27;mail&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FollowList</span>&gt;</span><span class="tag">&lt;/<span class="name">FollowList</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Current === &#x27;app&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UserProfileWrite</span>&gt;</span><span class="tag">&lt;/<span class="name">UserProfileWrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;script&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Current</span> = <span class="title function_">ref</span>(<span class="string">&#x27;mail&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectMenu</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">Current</span>.<span class="property">value</span> = key;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Current</span>.<span class="property">value</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这才是ref数据类型关于value的正确用法，在script里面都得用value，在template里面都不用value，这才能搞定，不然就寄</p><h4 id="关于webpack和vite"><a href="#关于webpack和vite" class="headerlink" title="关于webpack和vite"></a>关于webpack和vite</h4><p>npm默认的就是webpack打包，webpack是传统方式，vite是新方式，webpack对于不同数据类型的数据处理的并不好</p><p>babel就是一种webpack打包工具</p><blockquote><p>ERROR in .&#x2F;src&#x2F;assets&#x2F;Git.md?raw 1:1<br>Module parse failed: Unexpected character ‘ ‘ (1:1)<br>You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See <a href="https://webpack.js.org/concepts#loaders">https://webpack.js.org/concepts#loaders</a></p><p>这个错误通常发生在使用Webpack打包时，Webpack无法识别或处理某些文件类型的情况下。针对这种情况，你需要为Webpack添加一个loader来处理该文件类型</p></blockquote><h2 id="Ant-Design-of-Vue"><a href="#Ant-Design-of-Vue" class="headerlink" title="Ant Design of Vue"></a><strong>Ant Design of Vue</strong></h2><p>在启动项目前加入：<code>npm i --save ant-design-vue</code></p><p>然后完成注册（这里只讲全局注册）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Antd <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/antd.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.use(Antd).mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客📝 | Hexo+Vercel+butterfly</title>
      <link href="/posts/177574ba.html"/>
      <url>/posts/177574ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前用vercel+chatgpt next web搭建GPT私人站点后，发现vercel部署静态网站非常方便，于是就想着也用vercel搭建个人博客。捣鼓了一天，对功能和样式进行了一些修改美化，最终搭建完成。本文将介绍如何使用hexo+vercel+butterfly搭建个人博客。</p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">//在本地文件夹内</span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure></li><li><p>本地运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean# 清除缓存文件 (db.json) 和已生成的静态文件 (public)。第一次建站可以不执行</span><br><span class="line">hexo generate # 生成静态文件。</span><br><span class="line">hexo server # 启动本地服务器。默认情况下，访问网址为： http://localhost:4000/。</span><br></pre></td></tr></table></figure></li></ul><h2 id="vercel"><a href="#vercel" class="headerlink" title="vercel"></a>vercel</h2><h4 id="本地hexo文件夹上传github"><a href="#本地hexo文件夹上传github" class="headerlink" title="本地hexo文件夹上传github"></a>本地hexo文件夹上传github</h4><p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>更改_config.yml的deploy选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:goatpang/HexoBlog.git</span> </span><br><span class="line">  <span class="comment"># 用https会出错，git才可以（原因未知）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean# 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo generate # 生成静态文件</span><br><span class="line">hexo deploy # 部署网站</span><br></pre></td></tr></table></figure><h4 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a><a href="%22https://vercel.com/dashboard%22">Vercel</a>部署</h4><p> 点击import project导入github项目，然后点击deploy部署即可。</p><ul><li>vercel域名绑定<br>在vercel项目中，点击域名，然后点击add域名，输入域名。最后还需要在域名服务商那里添加cname记录，cname记录的值为vercel提供的域名。</li></ul><h2 id="butterfly-样式美化-amp-功能优化"><a href="#butterfly-样式美化-amp-功能优化" class="headerlink" title="butterfly | 样式美化&amp;功能优化"></a>butterfly | 样式美化&amp;功能优化</h2><h4 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h4><p>主要参考文章：<a href="https://www.wzhecnu.cn/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/">https://www.wzhecnu.cn/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/</a><br>以及：<a href="https://butterfly.js.org/">官方文档</a></p><h4 id="网站图标显示"><a href="#网站图标显示" class="headerlink" title="网站图标显示"></a>网站图标显示</h4><p>网页图标需要压缩到很小才能生效，可以使用：<a href="https://www.bitbug.net/">https://www.bitbug.net/</a></p><h4 id="URL美化"><a href="#URL美化" class="headerlink" title="URL美化"></a>URL美化</h4><p>参考文章：<a href="https://imbhj.com/b6a99401/">https://imbhj.com/b6a99401/</a></p><blockquote><p>Hexo 文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p><p>这样的话，生成的链接非常长长长长长，而且如果我们的 Markdown 使用中文标题，那就更惨了，URL 一转码，将是一场灾难。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h4 id="评论区功能"><a href="#评论区功能" class="headerlink" title="评论区功能"></a>评论区功能</h4><p>采用giscus：<a href="https://zhuanlan.zhihu.com/p/603658639">https://zhuanlan.zhihu.com/p/603658639</a></p><h4 id="底部栏美化"><a href="#底部栏美化" class="headerlink" title="底部栏美化"></a>底部栏美化</h4><p>footer美化（包含底边的badge）：<a href="https://www.aohuiliu.fun/posts/26947/">https://www.aohuiliu.fun/posts/26947/</a></p><p><a href="https://www.cnblogs.com/sddai/p/13779316.html">https://www.cnblogs.com/sddai/p/13779316.html</a><br><a href="https://lpd-ios.github.io/2017/05/03/GitHub-Badge-Introduction/">https://lpd-ios.github.io/2017/05/03/GitHub-Badge-Introduction/</a></p><p>badge官网：<a href="https://shields.io/">https://shields.io/</a></p><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>文章置顶：<a href="https://www.jianshu.com/p/42a4efcdf8d7">https://www.jianshu.com/p/42a4efcdf8d7</a></p><h4 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h4><p>师姐的一篇文章，和typora搭配使用非常方便：<a href="https://c10udlnk.top/p/blogsFor-Enjoying-hexo/#%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87">https://c10udlnk.top/p/blogsFor-Enjoying-hexo/#%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87</a></p><h4 id="spawn-failed"><a href="#spawn-failed" class="headerlink" title="spawn failed"></a>spawn failed</h4><ol><li>删除<code>.deploy_git</code>文件夹;</li><li>输入<code>git config --global core.autocrlf false</code></li><li>然后，依次执行：<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code></li></ol><h2 id="博客源码"><a href="#博客源码" class="headerlink" title="博客源码"></a>博客源码</h2><p>在<a href="https://github.com/goatpang/HexoBlog">这里</a>，可以给个star哦</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
